-- Supabase SQL schema for Nandini Pharma
create table if not exists user_data (
  id bigint generated by default as identity primary key,
  user_id uuid unique not null default gen_random_uuid(),
  email text,
  name text,
  phone text,
  address text,
  pincode text,
  landmark text,
  alt_phone text,
  city text,
  state text,
  created_at timestamp with time zone default now(),
  date_created timestamp with time zone default now(),
  date_modified timestamp with time zone default now()
);

create table if not exists user_otp (
  id bigint generated by default as identity primary key,
  email text not null,
  channel text not null default 'email',
  sent_at timestamp with time zone default now(),
  otp_code text,
  expires_at timestamp with time zone,
  is_verified boolean default false,
  date_created timestamp with time zone default now(),
  date_modified timestamp with time zone default now()
);

create table if not exists user_cart (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  product_id bigint not null,
  packaging_type text not null,
  name text,
  price numeric,
  image text,
  quantity int not null default 1,
  updated_at timestamp with time zone default now(),
  date_created timestamp with time zone default now(),
  date_modified timestamp with time zone default now(),
  unique(user_id, product_id, packaging_type)
);

create table if not exists user_orders (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  order_id text unique not null,
  status text not null check (status in ('failed','processing','placed','delivered')),
  items jsonb not null,
  amount numeric not null default 0, -- Amount excluding delivery charges
  delivery_charges numeric not null default 0, -- Delivery charges
  total_amount numeric not null default 0, -- Total amount including delivery charges
  payment_status text not null default 'Not_Paid' check (payment_status in ('Not_Paid','Paid','Failed','Refunded')),
  quantity int not null default 0, -- Total quantity of items
  total text, -- Keep for backward compatibility
  shipping jsonb,
  created_at timestamp with time zone default now(),
  date_created timestamp with time zone default now(),
  date_modified timestamp with time zone default now()
);

-- User addresses
create table if not exists user_addresses (
  id bigint generated by default as identity primary key,
  user_id uuid not null,
  label text, -- e.g., Home, Office
  name text,
  phone text,
  address text not null,
  city text not null,
  pincode text not null,
  is_default boolean not null default false,
  created_at timestamp with time zone default now(),
  date_created timestamp with time zone default now(),
  date_modified timestamp with time zone default now()
);

alter table user_data enable row level security;
alter table user_otp enable row level security;
alter table user_cart enable row level security;
alter table user_orders enable row level security;
alter table user_addresses enable row level security;
alter table pincode_status enable row level security;

create policy "user can view own profile" on user_data for select using (auth.uid() = user_id);
create policy "upsert own profile" on user_data for insert with check (auth.uid() = user_id);
create policy "upsert own profile update" on user_data for update using (auth.uid() = user_id);

create policy "log otp any" on user_otp for insert with check (true);
create policy "read otp any" on user_otp for select using (true);
create policy "update otp any" on user_otp for update using (true);
create policy "delete otp any" on user_otp for delete using (true);

create policy "manage own cart" on user_cart for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy "manage own orders" on user_orders for all using (auth.uid() = user_id) with check (auth.uid() = user_id);
-- Serviceable Pincodes
create table if not exists pincode_status (
  id bigint generated by default as identity primary key,
  pincode text unique not null,
  state text,
  district text,
  status int not null default 1, -- 1 deliverable, 0 not deliverable
  date_created timestamp with time zone default now(),
  date_modified timestamp with time zone default now()
);


create policy "manage own addresses" on user_addresses for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- Pincode status policies
create policy "anyone can read pincode status" on pincode_status for select using (true);

-- Function to update date_modified automatically
create or replace function update_date_modified()
returns trigger as $$
begin
    new.date_modified = now();
    return new;
end;
$$ language plpgsql;

-- Triggers for automatic date_modified updates
create trigger update_user_data_date_modified before update on user_data
    for each row execute function update_date_modified();

create trigger update_user_otp_date_modified before update on user_otp
    for each row execute function update_date_modified();

create trigger update_user_cart_date_modified before update on user_cart
    for each row execute function update_date_modified();

create trigger update_user_orders_date_modified before update on user_orders
    for each row execute function update_date_modified();

create trigger update_user_addresses_date_modified before update on user_addresses
    for each row execute function update_date_modified();

create trigger update_pincode_status_date_modified before update on pincode_status
    for each row execute function update_date_modified();

-- Update existing user_data table to use auto-generated user_id
-- Run these commands in Supabase SQL Editor if the table already exists:

-- OPTION 1: Keep UUID but make it auto-generated (RECOMMENDED)
-- ALTER TABLE user_data DROP CONSTRAINT IF EXISTS user_data_user_id_key;
-- ALTER TABLE user_data ALTER COLUMN user_id DROP NOT NULL;
-- ALTER TABLE user_data ALTER COLUMN user_id SET DEFAULT gen_random_uuid();
-- ALTER TABLE user_data ALTER COLUMN user_id SET NOT NULL;
-- ALTER TABLE user_data ADD CONSTRAINT user_data_user_id_key UNIQUE (user_id);

-- OPTION 2: Change UUID to BIGINT (if you prefer sequential numbers)
-- ALTER TABLE user_data DROP CONSTRAINT IF EXISTS user_data_user_id_key;
-- ALTER TABLE user_data ALTER COLUMN user_id DROP NOT NULL;
-- ALTER TABLE user_data ALTER COLUMN user_id TYPE bigint USING user_id::text::bigint;
-- ALTER TABLE user_data ALTER COLUMN user_id SET DEFAULT nextval('user_data_id_seq');
-- ALTER TABLE user_data ALTER COLUMN user_id SET NOT NULL;
-- ALTER TABLE user_data ADD CONSTRAINT user_data_user_id_key UNIQUE (user_id);

-- Update existing user_orders table to add new columns
-- Run these commands in Supabase SQL Editor if the table already exists:

-- Add new columns to user_orders table
-- ALTER TABLE user_orders ADD COLUMN IF NOT EXISTS amount numeric DEFAULT 0;
-- ALTER TABLE user_orders ADD COLUMN IF NOT EXISTS delivery_charges numeric DEFAULT 0;
-- ALTER TABLE user_orders ADD COLUMN IF NOT EXISTS total_amount numeric DEFAULT 0;
-- ALTER TABLE user_orders ADD COLUMN IF NOT EXISTS payment_status text DEFAULT 'Not_Paid';
-- ALTER TABLE user_orders ADD COLUMN IF NOT EXISTS quantity int DEFAULT 0;

-- Add constraints for new columns
-- ALTER TABLE user_orders ADD CONSTRAINT IF NOT EXISTS user_orders_payment_status_check 
--     CHECK (payment_status IN ('Not_Paid', 'Paid', 'Failed', 'Refunded'));

-- Update existing records to have proper values
-- UPDATE user_orders SET 
--     amount = COALESCE(amount, 0),
--     delivery_charges = COALESCE(delivery_charges, 50),
--     total_amount = COALESCE(total_amount, 0),
--     payment_status = COALESCE(payment_status, 'Not_Paid'),
--     quantity = COALESCE(quantity, 0)
-- WHERE amount IS NULL OR delivery_charges IS NULL OR total_amount IS NULL OR payment_status IS NULL OR quantity IS NULL;

